
public class Solution {
    public ArrayList<Integer> solve(ArrayList<Integer> A) {
        
        int xor_all = 0;
        
        // Step 1: XOR all elements to get xor_all = n1 ^ n2
        for (int i = 0; i < A.size(); i++) {
            xor_all ^= A.get(i);
        }
        
        // Step 2: Find the rightmost set bit in xor_all
        int pos = 0;
        for (pos = 0; pos < 32; pos++) {
            if (checkbit(xor_all, pos) == 1) {
                break;
            }
        }
        
        int n1 = 0, n2 = 0;
        
        // Step 3: Separate elements based on the rightmost set bit
        for (int i = 0; i < A.size(); i++) {
            if (checkbit(A.get(i), pos) == 1) {
                n1 ^= A.get(i);
            } else {
                n2 ^= A.get(i);
            }
        }
        
        // Step 4: Sort n1 and n2 and return as ArrayList
        ArrayList<Integer> result = new ArrayList<>();
        result.add(Math.min(n1, n2));
        result.add(Math.max(n1, n2));
        return result;
    }
    
    // Helper function to check if the i-th bit of N is set
    public int checkbit(int N, int i) {
        if ((N & (1 << i)) > 0) {
            return 1;
        }
        return 0;
    }

}
