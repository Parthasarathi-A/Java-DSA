import java.util.*;

class Main {
    // Function to count numbers divisible by B or C up to X
    public int count(long X, int B, int C) {
        long lcm = lcm(B, C); // Find LCM of B and C
        return (int) (X / B + X / C - X / lcm);
    }

    // Function to find the magical number
    public int magical(int A, int B, int C) {
        long l = 1; // Left boundary
        long r = (long) A * Math.min(B, C); // Right boundary
        int ans = -1;

        // Binary search
        while (l <= r) {
            long mid = l + (r - l) / 2;
            if (count(mid, B, C) > A) {
                r = mid - 1;
            } else if (count(mid, B, C) < A) {
                l = mid + 1;
            } else {
                ans = (int) mid; // Record the result
                r = mid - 1;     // Look for a smaller valid number
            }
        }

        return ans;
    }

    // Function to calculate LCM
    public long lcm(int a, int b) {
        return (long) a * b / gcd(a, b);
    }

    // Function to calculate GCD
    public int gcd(int a, int b) {
        if (b == 0) return a;
        return gcd(b, a % b);
    }

    public static void main(String[] args) {
        Main obj = new Main();
        int A = 4;  // Example input
        int B = 2;
        int C = 3;
        System.out.println("Magical Number: " + obj.magical(A, B, C));
    }
}
