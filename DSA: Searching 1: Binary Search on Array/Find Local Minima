import java.util.*;

public class Main {
    public long solve(int[] A) {
        int n = A.length;
        int r = n - 1;
        int l = 0;

        while (l <= r) {
            int mid = l + (r - l) / 2;

            // Check if the current element is a local minima
            if ((mid == 0 || A[mid] < A[mid - 1]) && (mid == n - 1 || A[mid] < A[mid + 1])) {
                return mid; // Return the index of the local minima
            } 
            // If the left neighbor is smaller, move left
            else if (mid > 0 && A[mid] > A[mid - 1]) {
                r = mid - 1;
            } 
            // Otherwise, move right
            else {
                l = mid + 1;
            }
        }

        return -1; // If no local minima is found (shouldn't happen for valid input)
    }

    // Main function
    public static void main(String[] args) {
        Main obj = new Main();
        
        // Example input array
        int[] A = {9, 7, 5, 3, 8};
        
        long result = obj.solve(A);
        
        if (result != -1) {
            System.out.println("The local minima is at index: " + result + " with value: " + A[(int)result]);
        } else {
            System.out.println("No local minima found.");
        }
    }
}
