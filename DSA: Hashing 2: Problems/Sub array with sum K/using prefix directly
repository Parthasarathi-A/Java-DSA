import java.util.HashSet;

public class Main {
    public static boolean solve(int[] a, int k) {
        int n = a.length;
        int[] prefixSums = new int[n];
        HashSet<Integer> hs = new HashSet<>();
        
        // Add initial prefix sum of 0 to handle subarrays that sum to `k` starting from the beginning
        hs.add(0);

        // Calculate prefix sums
        prefixSums[0] = a[0];
        for (int i = 1; i < n; i++) {
            prefixSums[i] = prefixSums[i - 1] + a[i];
        }

        // Check if a subarray with sum `k` exists
        for (int i = 0; i < n; i++) {
            int currentPrefixSum = prefixSums[i];

            // Check if (currentPrefixSum - k) exists in HashSet
            if (hs.contains(currentPrefixSum - k)) {
                return true;
            }

            // Add current prefix sum to HashSet
            hs.add(currentPrefixSum);
        }
        return false;
    }

    public static void main(String[] args) {
        int[] a = {1, 2, 3, 4, 5};
        int k = 9;

        boolean result = solve(a, k);
        System.out.println(result);  // Output will be true if a subarray sum equals k, otherwise false
    }
}
