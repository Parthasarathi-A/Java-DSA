public class Solution {
    public ArrayList<ArrayList<Integer>> solve(ArrayList<ArrayList<Integer>> A, int B) {
        // Sort the points based on their Euclidean distance from the origin
        Collections.sort(A, new Comparator<ArrayList<Integer>>() {
            public int compare(ArrayList<Integer> p1, ArrayList<Integer> p2) {
                double dist1 = distance(p1);
                double dist2 = distance(p2);

                if (dist1 < dist2) {
                    return -1;
                } else if (dist1 > dist2) {
                    return 1;
                }
                return 0;
            }
        });

        // Extract the B closest points
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        for (int i = 0; i < B; i++) {
            result.add(A.get(i));
        }
        return result;
    }

    // Function to calculate the Euclidean distance of a point from the origin
    private double distance(ArrayList<Integer> point) {
        int x = point.get(0);
        int y = point.get(1);
        return Math.sqrt(x * x + y * y);
    }
}
