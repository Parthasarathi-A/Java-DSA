public class Solution {
    public ArrayList<ArrayList<Integer>> insertAndMerge(ArrayList<ArrayList<Integer>> A, ArrayList<Integer> B) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        int N = A.size();
        int L = B.get(0);
        int R = B.get(1);
        
        for (int i = 0; i < N; i++) {
            // Add intervals that come completely before the new interval
            if (A.get(i).get(1) < L) {
                result.add(A.get(i));
            }
            // If current interval starts after new interval, add merged interval and remaining intervals
            else if (A.get(i).get(0) > R) {
                ArrayList<Integer> mergedInterval = new ArrayList<>();
                mergedInterval.add(L);
                mergedInterval.add(R);
                result.add(mergedInterval);
                
                // Add the remaining intervals one by one
                for (int j = i; j < N; j++) {
                    result.add(A.get(j));
                }
                return result;
            }
            // Merge intervals that overlap with the new interval
            else {
                L = Math.min(L, A.get(i).get(0));
                R = Math.max(R, A.get(i).get(1));
            }
        }
        
        // Add the last merged interval if it wasn't added in the loop
        ArrayList<Integer> mergedInterval = new ArrayList<>();
        mergedInterval.add(L);
        mergedInterval.add(R);
        result.add(mergedInterval);
        
        return result;
    }
}
